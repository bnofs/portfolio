{"componentChunkName":"component---src-pages-projects-js","path":"/projects/","result":{"data":{"allContentfulProject":{"nodes":[{"title":"Design System Foundations","thumbnail":{"file":{"url":"//images.ctfassets.net/crw7rb96lc2r/2IiiW2quS2fPxEDblxnY5I/8105aa80f8b1cece5b6effd613a8f54f/nielsen-colors.png"}},"content":{"content":"## Colors\nFollowing the 2021 Nielsen re-brand, our marketing department introduced a new set of colors that would shape how we make future products. This aligned extremely well with the introduction of Nielsen's design system.  \n\nStarting off with these marketing colors, I had to slightly tweak and transform the palettes in order to work better for the UI in our products. Accessibility was already established as a strong principle for this new design system, so we was able to craft a set of nine main colors with an 11-scale for each.  \n\nThis would give us enough flexibility to have a variation of color lightnesses to pick from for BOTH a light and dark mode UI (another thing that would be coming in the future).\n![nielsen-colors](//images.ctfassets.net/crw7rb96lc2r/2IiiW2quS2fPxEDblxnY5I/8105aa80f8b1cece5b6effd613a8f54f/nielsen-colors.png)\n\nIn order to achieve balance in our color scales for both light mode and dark mode, I used the \"Stark\" plugin in Figma to measure the color contrast between each color and a white/black background. The objective was to have roughly half of the colors (the lighter half) fully accessible on a black background and the other half accessible on white, meaning that each color 4.5:1 contrast ratio. This way, when switching from light to dark mode, and vice versa, we could start by a simple inversion of our color scales and still maintain accessible requirements for all components.\n![Screen Shot 2023-02-02 at 12.52.56 PM](//images.ctfassets.net/crw7rb96lc2r/1S03FSvO5vTePIqpAswXCD/8a0c8ffae2fb36d23e76baa25b8d18b6/Screen_Shot_2023-02-02_at_12.52.56_PM.png)\n\nAnother intersting challenge with color came from the fact that some of our components needed to work on several different background colors. A good example of that was our context switcher, which may appear on both a white or gray-100 background.  \n\nBy default, it had a gray-100 background because we aimed to achieve a subtle contrast with the background it was placed on. But this didn't work when placed on a gray-100 background, because the color doesn't show. The next logical choice was to make the gray color darker (gray-200) so that it shows up on both background types. But this strayed away from how we wanted to the component to show on a white background - it was a bit too bold.  \n\nThis led to me instantiating the idea of __Opacity Tokens__, which are a way to represent the color normally on the \"default\" background, but still be able to show on alternate backgrounds. This was done by bumping the color up in the scale and giving it some opacity, so that it *appeared* the same as the normal token, until placing it on an alternate-colored background. I created a opacity tokens for several of our light shades gray and blurple for light mode, (as well as the alternate for dark mode) to give us maximum flexibility when creating and updating components in the future.\n![opacity tokens](//images.ctfassets.net/crw7rb96lc2r/2NajlX6yhA5vsou7rM7CDi/42b354d0ee51bde3c00a86df440cc2d7/opacity_tokens.png)\n\n## Typography\nFor our typography, we decided on a scale of eleven different sizes, with three font weights for each (regular, semi-bold, and bold). One of the main objectives for the new system was to increase legibility across our apps, specifically our data-heavy, highly dense B2B products. To do this we created a base-size of 16px for the system, using this size as our \"Regular\" variant for many of our components. This was a huge improvement, as most of our legacy apps use 12px or 13px as a base size and leads to significant strain on the eyes after using the product for a significant amount of time.  \n\nLine heights and letter spacing was also carefully chose to meet accessibility needs (WCAG 2.2 AA standards) for our products as well as making the text in our applications easier to read.\n\nInter was chosen as our go-to font for our product suite, as it is notorious for great readablity at larger and smaller sizes, and also has support for a large number of languages.  We also enabled a number of Open Type features such as slashed zeroes, open digits, and monospaced numbers to increase legibility even more.\n\nBecause not ALL languages are covered through Inter, we have Noto Sans as a fallback option in case the language is not supported. With Nielsen being a global company and always expanding into new markets, it was highly important that we chose a font stack with full support, which had been previously problematic specifically with \"right-to-left\" langauges. \n![typography](//images.ctfassets.net/crw7rb96lc2r/16FJKWZ4JlSrcWm3TuX2rH/02cb425efff0d76e8342470b7f29b523/typography.png)\n\n## Spacing\nOur spacing system was crafted based on a 4px grid system, and this helped maintain consistency from smaller components all the way up to full page layouts. Again, we went with an 11-scale of spacing tokens, from 2px (special token for borders) all the way up to 64px. These are used for most internal padding, margins, heights, within our components. We have a few common tokens (24, 32, 48px) that are used for the heights of a handful of our components, making placing components NEXT to each other easier to scale as our designers begin to build screens.\n\nFor spacing __between__ components, or for screen layouts, I created a set of layout tokens to help with larger-scale organization. These range 192px, typically used for column widths in our layout system, all the way up to 1920px which is the biggest screen we provide support for on the web (margins simply infinitely increase after that).\n![Screen Shot 2023-02-02 at 1.32.50 PM](//images.ctfassets.net/crw7rb96lc2r/2S9Jsqvbm8VLvyI2aKaVIL/a92a8cd33da7258b066dab41f12088c0/Screen_Shot_2023-02-02_at_1.32.50_PM.png)"}},{"title":"Advanced Component Building","thumbnail":{"file":{"url":"//images.ctfassets.net/crw7rb96lc2r/7nQL7XTHnSpIVJzQsbUaWq/ff342026e0ab02f8a66d543d37436314/stepper.png"}},"content":{"content":"## Gathering Requirements\nThe first step involved with building a component is to make sure you have everything you need in order to get started. Some components may come from an external source, for example a product owner or other stakeholder, while others you may have to come up with yourself. I may look at inspiration from other design systems or Dribbble to help discover all states or properties needed for a component. For this specific example, we will be looking at a Stepper component.  \n\nTo start, I know that we are going to need both a linear stepper and non-linear version of the stepper. It is a specific part of the requirements for a Report Builder that is needed for one of our Nielsen applications. Also, I will need some way to denote either an optional or required step, as some steppers may have a mix of both. In addition to that we need a way to see the \"count\" of selections in each step, which may be relevant for some or all of the steps in a flow.  \n\nThe last part of requirements gathering involves thinking about ALL potential use cases, trying to \"future-proof\" the component so that it is robust to future changes. It helps to think about edge cases that may happen infrequently, in order to account for all scenarios.  \n\nOther features or properties that fall under this list include having a direction (vertical and horizontal), as I know sometimes horizontal or vertical screen real estate can be more important. I also know I will need some ability to distinguish between a step that is complete, incomplete, in progress, or potentially disabled. I may also consider a \"position\" state, which will show the beginning, middle, and end of a stepper and of COURSE, all of our components must include dark mode. ðŸ˜‰\n\n## Determining Properties and Sub-Components\nSo for this example of a Stepper component, I have determined it will consist of the following properties:\n1. Mode: Light, Dark\n2. Direction: Horizontal, Vertical\n3. Type: Linear, Nonlinear\n4. Position: Start, Middle, End\n5. State: Complete, Active, To Do\n6. w/ Count?: True, False\n7. Required?: True, False\n\nFrom these properties, I know there will be roughly 288 (2x2x2x3x3x2x2) overall different versions of this single component, which can be quite large and difficult to manage. I have found it very helpful when building out components to break it into sub-components. So here is what components I will be building:\n- __Stepper__: this is the main component, so should be simple enough with few variants to be able to pull into a project quickly and get what you need. This components main responsibilty should be laying out the overall structure for the Stepper so you can easily drop it into a design.\n  1. Mode: Light, Dark\n  2. Direction: Horizontal, Vertical\n  3. Type: Linear, Nonlinear\n- __Stepper Item__: This will be where a lot of the magic happens. Most of the variants will go into this component so that a designer can easily add/remove stepper items and configure how they need.\n  1. Mode: Light, Dark\n  2. Direction: Horizontal, Vertical\n  3. Position: Start, Middle, End, Nonlinear\n  4. State: Complete, Active, To Do\n  5. w/ Count?: True, False\n  6. Required?: True, False  \n\nNote: In cases where variants get to a high number (let's say over 100) it may be useful to build out a helper component or two to manage updates if things change over time. These will exist only in Figma for the purpose of managing the component library. Two helper components I would consider in this use case might be some sort of form label, that includes the text style & required/chip indicators, and a component for the actual graphical indicator, since this is something we may want to tweak over time.\n\n## Building out Component(s)\nFirst component to build is the progress-indicator \"helper\" component. This will be the graphic shown next to the names for the steppers, indicating WHERE the user is in the flow. One thing I want to make sure is that color is not the only way a user is able to determine status, and should be obvious in another way (filled in vs. empty circle). For this component, I'll start with what I think of as the __first__ occurance of a stepper item, which is an active, first step. From there I will go on to build other variants (by copy, pasting, tweaking) including state, tail position (making sure I account for horizontal versions), and mode for light and dark. This is just a placeholder for now, as I am building it in a way so that I'm able to update easily later.\n![stepper-indicator](//images.ctfassets.net/crw7rb96lc2r/pi1b7M7Vz2rNI9d13xN9p/50fb9df37e1d9d0444bc6e9756710a9b/stepper-indicator.png)\nThe next step will be building out the form-label component, which will include the style for the text in all states, as well as a required indicator and chip that can be toggled on an off by the user. Again, this serves as a helper-component that will allow me to scale changes throughout the \"main\" component with a lot of variants in the future.\n![stepper-label](//images.ctfassets.net/crw7rb96lc2r/4Y9sxh2mcduRyGCyyfZ498/9ec1f562d194fc10c641f2bb90daa51e/stepper-label.png)\nNow it's time for the BIG component, stepper item. In this, I will basically piece together the other two helper components I already made into one main component with ALL of the possible variants. This way, if a designer is using a stepper component and wants to configure/make changes, I can direct them to go right to stepper item, instead of configuring each piece individually. At this point, I have decided on six main variants for this components, (Mode, Position, State, Direction, w/ Chip?, Required) which I will lay out logically in a grid on the canvas.\n![stepper-item](//images.ctfassets.net/crw7rb96lc2r/7b0LXCK7GSMZnF2lF69JzD/d2f98877770f0f290ad76d3971e7eac2/stepper-item.png)\nIn building out all of the possible variants, I discovered a few additional things that I will add to the component at this time. First, since this component should be clickable (to jump around to different steps), I will need to add a Hovered and Clicked state to each version with this ability. I also discovered that the horizontal and vertical versions need to have different widths: the vertical items will be fixed, since they display on the side panel where horizontal space is not as important, and the vertical items are now set to \"hug contents\" so that they save as much horizontal space as possible.\n\n## Finishing Touches\nAt this point, I've already done most of the grunt work and all that is left to do is put a bow on everything. The final component will just be called \"Stepper\" which consists of all of the sub-components I already made. This will have only a few variants (Mode, Direction, Linear or Nonlinear), to make it simple for the user to drop into their designs.\n![stepper](//images.ctfassets.net/crw7rb96lc2r/7nQL7XTHnSpIVJzQsbUaWq/ff342026e0ab02f8a66d543d37436314/stepper.png)\nAfter I *think* the component is finished, I always like to throw it in a number of different scenarios to make sure it behaves how I had expected. This includes testing it's responsiveness as you grow or shrink the height or width, as well as testing edge cases like \"what happens if the stepper name is really long.\" From there I will make my adjustments, and because I constructed the component in an atomic way, it is really easy to make changes! \n![stepper-flow](//images.ctfassets.net/crw7rb96lc2r/2Vj0wqxhXsai4DXY6YxcUZ/bf80911a2ae6ad2c63d27f8ce5dc0c24/stepper-flow.png)\nAnd with that, the Stepper is ready to be published and go out into the world!"}},{"title":"Data Visualization","thumbnail":{"file":{"url":"//images.ctfassets.net/crw7rb96lc2r/S3hd4CWJUMMcbeeLmI8z9/5f71050b4c2a9a7473a80947ec542f81/bar-chart-proto.png"}},"content":{"content":"## Base Components\nBeing the lead (and only) designer on this project, I knew I wanted to create these chart components to be as scalable as possible. Part of what that included was creating a set of \"base\" components that would be consumed by the rest of the main chart and graph components. One benefit of this is so that updates or changes to these components in the future become very simple and easy. But the reason to create these base components is so that our entire suite of visualizations follows the same set of guidelines and visual patterns. It was almost like creating a mini design system just for data visualizations!  \n\nThese set of base components included a *chart-title*, *label*, *axis-labels*, *grid-line*, *grid*, *legend-item*, *legend*, and *chart-tooltip*. These would be the basis for me to continue on and build out the rest of our charts and graphs.\n![data-viz-base](//images.ctfassets.net/crw7rb96lc2r/2HhbBMJM4EvDuhavVizaaD/3b6247fbad67e0f99f1a9cb7677ecbf9/data-viz-base.png)\n\n## Accessibility Guidelines\nBecause we are firm on meeting WCAG accessibility guidelines for our new design system, I was on to do some research. I was very confident about accessibility for a basic components, making sure we include things like proper color contrast and large click targets, but Data Visualization is a whole other animal. So I went off spending hours if not days of research making sure I understood the complexities of data viz, and how we needed to incorporate accessibility. My main question I wanted an answer to was: \"how do we choose \"aesthetic\" colors that also meet a 3:1 color contrast?\" Those two things were very hard to satisfy. The solution that ended up alleviating a lot of our concerns was to have a small gap in between any area that would have \"touching\" colors. This provides a visual barrier between the two, even if they don't meet color contrast requirements. \n![chart-accessibility](//images.ctfassets.net/crw7rb96lc2r/5zrZnTWfzreKBKYXRM6jlu/39abf3749361e31ae0fbfd78bd9a282f/chart-accessibility.png)\n\n## Bar Chart\nThe bar chart is the most heavily used at Nielsen, so I knew I had to get this one right. Features that would need to be included in the bar chart are having multiple series, a \"stacked\" version, direction for both horizontal and vertical, labels for indidual bars and \"total\" bars, a legend to show the names of each series, and additional labels for the chart title, axis names, and an empty state.  \n\nAgain, I started by building some base components to be used just by the bar chart. For these I created a *bar*, which establishes the style for a single bar, a *bar-group*, which includes how the bars display next to each other and also in a \"stacked\" mode, and a base *.bar-chart* component that would break up the main component into smaller, easier to understand pieces.\n![bar-chart-base](//images.ctfassets.net/crw7rb96lc2r/Fyxhq1wBcPbEv8x62M71J/cc94c858b9543890d53a4e272dc4f91a/bar-chart-base.png)\n\nFor the main component, I would also include a variant to toggle the number of series the user would like to display in the chart, as well as hiding/showing axis labels and legends in the chart. This would make for a relatively complex component, which is why I abstracted away some of the more uncommon items into the base components, making the main one simpler and easy to use.\n![bar-charts](//images.ctfassets.net/crw7rb96lc2r/4rene031AKuEqbiBU7mADa/ea0a3ae45de25d8dc1cbbbabe8f0832d/bar-charts.png)\n\nIn addition to the component itself, I went on to make user flows and prototypes for the bar chart to describe and show how the component should work when the user interacts with it in a real application. For the hover state, I decided to go with a slight opacity on the \"active\" bar or bar group, showing the chart-tooltip with additional information on the side.\n![bar-chart-proto](//images.ctfassets.net/crw7rb96lc2r/S3hd4CWJUMMcbeeLmI8z9/5f71050b4c2a9a7473a80947ec542f81/bar-chart-proto.png)\n\n## Line Chart\nAfter getting bar charts out of the way, the rest would be easy! ðŸ˜… A line chart is similar to a bar chart in a lot of ways, so I decided to build it using the same structure. First I would build a base component to store some of the less common features needed for the chart, and then move on to the main component. Interestingly, I discovered there were a few additional features that would be helpful for a line chart that weren't required for the bar. This included a version for showing \"area under the curve\" as well as a variant for a curved vs. straight line.\n![line-chart-base](//images.ctfassets.net/crw7rb96lc2r/5HNxVI227x9YNHRLVVtlxj/8e30be96f713698afab6779158daf02d/line-chart-base.png)\n\nBuilding out the rest of the variants for the main line-chart component was simple, and involved again having light/dark mode, a variant for number of series, as well as being able to hide both the chart and axis titles if needed. \n![line-chart](//images.ctfassets.net/crw7rb96lc2r/6NQxJbdUjpVlptfClYcTIj/07b1ada2a8b2e29934d393f776b31ae3/line-chart.png)\n\n## Other Charts\nThere are a number of other charts I created for the system, but are of less importance because they are more rare. Still, I followed the same accessibility principles and used the same base components to create these in order to have a cohesive experience across the board. These include a pie chart, donut chart, gauge chart, venn diagram, and a funnel chart.\n![other-charts](//images.ctfassets.net/crw7rb96lc2r/5xOO45AgyjNKksu3YiGg0K/bb7dcf58388804a48396a25417b7a6c7/other-charts.png)"}},{"title":"Nielsen Design System Website","thumbnail":{"file":{"url":"//images.ctfassets.net/crw7rb96lc2r/1X8i0zyrcE3cHfb14B4Oj6/026ffa8fb09273d129fd7df8e186a061/20220314_nielsenPrivate_3x2.webp"}},"content":{"content":"## Setting up Initial Site\nWhen siting up the documentation website for the Nielsen Global Design System (GDS), I knew we wanted it to accomplish a few things.  \n\nFirst, we wanted it to be easy for anyone to open up and find what they need. The content that would be in the site isn't all that different from what is in Figma, but the website should be for EVERYONE. Not just designers or developers.\n\nWe also wanted to set a strong example with the website. This was our chance to create something *using our own system*. Getting to use all of the foundational principles of accessibility and responsiveness would be a great example to point to and say, \"Look, this is how to do it.\"\n\nThe last thing that was essential for building out this website is to make it so that anyone could contribute to the content of the site. Being a large task, we wanted to open it up so that other designers could be able to help write content and bring it back to the system. So we would need some form of CMS to connect to the content pages of the site.\n\nFrom all of these requirements, I decided that a Gatsby site, connected to Contentful as a CMS would be a great solution. I had not used Contentful in the past, but was assured from peers and external research that it would be a great solution for our needs.![Screen Shot 2023-02-03 at 11.30.43 AM](//images.ctfassets.net/crw7rb96lc2r/4456cTsVrYSd22emQjm2sV/02c4ca6597214ba1140808132b9612df/Screen_Shot_2023-02-03_at_11.30.43_AM.png)\n\nSetting up the site was actual not all that difficult, it just required pre-planning of how I would organize the site, as well as designs to go off of to actual style the site how we wanted it to look. Aside from that, it was simply taking it piece by piece.\n\n## Foundations\nThe Foundations pages were a good place to start development, because these would remain mostly static, requiring minimal updates over time. This means that they were not required to hook up to a CMS for content. But it was a good place to start creating the page frames and styling everything from scratch, using our own design system as a styleguide.  \n\nIn this section of the website, we have pages for Design Principles, Writing Guidelines, Accessibility, Design Tokens, Colors, Typography, Layout, Icons, and Logo. Each of these pages were custom implementation, each their own file with automated routing in the Gatsby project.\n![Screen Shot 2023-02-03 at 11.37.24 AM](//images.ctfassets.net/crw7rb96lc2r/3JpTBfdgZPZN0d8sRe6Er5/5bcf7b33a2c210b4df17c152f3ae2ea4/Screen_Shot_2023-02-03_at_11.37.24_AM.png)\n\nThe most challenging part of this part of the website was figuring out how to add a Table of Contents section that was clickable but also automatically update as the user scrolls. I was able write a custom Javascript function, where it first searched for all of the \"h2's\" on the page and indexed them to certain positions, and then, when the user scrolls, it keeps track of you're current position on the page. When the users current position crosses over one of the h2's, the \"active\" section is updated in the table of contents.\n![scroll-feature](//downloads.ctfassets.net/crw7rb96lc2r/3YYWCdhaSN8388fyk1XuMl/06226c6c5704d60a882e2d483fb01a40/scroll-feature.gif)\n\n## Components\nFor the components pages, this is where Contentful gets involved. I was able to build this site so that each page was fed by a content model object from Contenful, where I was able to fetch things like page name, description, relevant links, and then page content.\n![Screen Shot 2023-02-03 at 11.47.46 AM](//images.ctfassets.net/crw7rb96lc2r/4BtfDJ9L8ZhVmllyl4NSCk/c23fff1f636fec8084fe11a2903d0331/Screen_Shot_2023-02-03_at_11.47.46_AM.png)\nThis means that there would be one \"content\" object for each page, or component in the website. This made it so that non-technical people on my designer team were also able to contribute to this portion of the site. There would be *some* learning curve to teach people how to use markdown, if they didn't already know, but not nearly as much difficulty as teaching them how to use Javascript frameworks or Github to make updates.\n![Screen Shot 2023-02-03 at 11.51.12 AM](//images.ctfassets.net/crw7rb96lc2r/50hgKHJyQTzXKVJXBjzHXZ/1a3346c21668fa932909dba456a70b6a/Screen_Shot_2023-02-03_at_11.51.12_AM.png)\nIn the Gatsby project, I was able to create one page template, that ingested all of this data from Contentful - automatically creating new pages dynamically. I also was able to link the Github repository to the Contentful space, automatically triggering a new build and pushing changes that were just made to the live site.\n\n## Custom Search Component\nThis was another feature I knew we wanted for the site, but at the time I started building, I wasn't quite sure how it would get done. I looked into things like Algolia and a few other search API's that I might be able to use for the site, but ultimately decided that a custom implementation was the way to go because of money and overall setup time needed.  \n\nBasically, how I was able to do this was create a reusable component in my Gatsby project took it two things: 1. A search term, that would be updated every time the user typed or removed a character from the input and 2. A HUGE object of all of the component names, descriptions, content, etc. that I would be searching through.  \n\nAfter spending a few days on this, I was able to finally get a component that would return the expected list of relevant pages. To add a nice little cherry on top, I added a \"highlighting\" feature that lit up which parts of the content page actually match the search term. This would help with understanding why a certain page populated in the search results.\n![Screen Recording 2023-02-03 at 12.02.28 PM](//images.ctfassets.net/crw7rb96lc2r/1xpvy2cbmCSgmz0qOYaDrx/39dbefbd2b36abf2e54392e8d17fc24c/Screen_Recording_2023-02-03_at_12.02.28_PM.gif)"}},{"title":"Nielsen Media Portal","thumbnail":{"file":{"url":"//images.ctfassets.net/crw7rb96lc2r/3JhmClYLdcprj1Gescy59p/ea9f8d83fa31f6c430feb73a5c511cc3/nielsen-portal.png"}},"content":{"content":"The designs for this application could be sectioned into two main sections: First, we had the actual front-end for what the user sees when they login to the app. And then we also have to an admin application for a specific number of users who need to configure things in the app. This includes assigning users to apps, removing access rights, creating new users, etc.  \n\n## Media Portal App Selector\nThe app selector screen was actually relatively simple. We just needed a page that shows a list of apps, probably in a card view that you can click on to launch that app in a new tab. There were also a number of things to consider like how many apps the user has access to, can they \"favorite\" an application, is there a way to see recent apps, etc. I also had to consider things like what screen sizes I should be designing for and what are accessibility needs for the app.\n\nThrough a number of iterations and testing with internal users, I came up with a finalized design for the app selector. Laying out all of my designs in a huge grid, so you could see the permutations of edge cases and user flows, I handed this portion off to development.\n![nielsen-portal](//images.ctfassets.net/crw7rb96lc2r/3JhmClYLdcprj1Gescy59p/ea9f8d83fa31f6c430feb73a5c511cc3/nielsen-portal.png)\n\n## Portal Management\nThe other side of the app, Portal Management, was a lot more complicated. Since it is an internal Nielsen application, I'm not able to show actual designs of the screens, but the app mostly consisted of the CRUD (Create, Remove, Update, Delete) actions for Users, Applications, and Organizations, which was the structure we had in place at the time.  \n\nThis part of the project consisted of a DEEP understanding of how our applications are put together from an information architecture standpoint, which I was able to learn during the process that UX design is not just about making things look pretty. You have to know exactly *what* sort of data your dealing with and what implications certain parts of the app have on each other.  \n\nWhen I finally got to a place where I *thought* I was ready to release the designs to the development team, I conducted several rounds of usability testing through [usertesting.com](https://usertesting.com), a new platform we were trying out at Nielsen at the time. Based on what I learned from the testing synopsis, I was able to make changes and finish my designs with more confidence that my flows were actually what the user needed.\n"}},{"title":"Meh Vote Development","thumbnail":{"file":{"url":"//images.ctfassets.net/crw7rb96lc2r/2aOohRGhR2jHFs7GBAqA5A/26adad14d1edc4474900e9dc2f446398/imgur.jpeg"}},"content":{"content":"Being an form of social media and image/video sharing platform, Imgur has always had the concept of \"up\" and \"down\" voting. Essentially, this is their form of liking or disliking content, and directly affects which content is pushed to the top of their discovery page.  \n\nFor April 1, 2019 (actually ended up being about a week), we introduced the idea of a Meh Vote. \"When you donâ€™t hate it, but you donâ€™t love it, make your presence known by giving it a Meh.\" - [Presenting: The Meh Vote. The Virtual Shrug of the Future.](https://imgur.com/gallery/Q1wFj2k)  \n\nBecause at the time I was on the front end development team, I was responsible for developing this feature for the web platform. When clicking on the sideways \"meh\" vote, a randomized gif would pop up on the screen showing your medium sentiment towards the post.  \n\nIn addition to implementing this feature itself, I also made an automated process so that users would only get this feature for a limited amount of time. Depending on the users time zone preferences, they would have this third vote option pop up for each of their midnight's on April 1st, and ran the campaign for a few days after that.  \n\nThe fun April Fool's day \"joke,\" was a huge hit, and the feature that I developed for the website reached 10+ million users, according to Imgur tracking data. This was the first big project I put out into the world on a large scale, and inspired me keep pushing for positive change in the rest of my design/development career. It also reminded me that not everything has to be so serious! ðŸ˜œ  \n![3 - OYyeo5Q](//images.ctfassets.net/crw7rb96lc2r/5BGEszgdNA7POCtdXq0dxg/7ef92644b62c94f9475a320f058eed1d/3_-_OYyeo5Q.gif)\n\n[Collection of Meh Vote Examples](https://imgur.com/t/mehvote/aANXM7d)"}},{"title":"Imgur Subscription Model","thumbnail":{"file":{"url":"//images.ctfassets.net/crw7rb96lc2r/2NEnCyGaLTG1mNg2olsfLv/1214a449992743bed660d1121a14ee28/Screen_Shot_2023-02-03_at_12.53.48_PM.png"}},"content":{"content":"After getting some experience with front-end development at Imgur, I wanted to see what the product side of things was like. I created my own project to do a competitive market analysis and see how other companies like Imgur are making money. From this I discovered they *may* be missing a good oppourtunity to increase the revenue on their platform aside from ad revenue.  \n\nIn doing this research, I looked first at companies that were very similar in terms of the products they offered. Social media platforms like Reddit, Twitter, and Instagram were on my short-list to evaluate how they made money and if they offered anything like a subscription plan. But I also looked at companies a bit less similar, like Adobe, someone who has really dove deep into the subscription market, and evaluate how they have done over time.  \n\nMy research consisted of looking at news articles and finding any information about ad revenue and/or subscription offerings that I could, compiling all of this information into a big Google sheet so that I could make a side-by-side comparison of all of my findings.\n\nI also did a breakdown of how Imgur was currently making their money. Looking at how much revenue they earn __per user__, and also breaking it down by how active the users were. Even with only revenue estimates, I was able to find that the top 25% of users (determined these people were the most likely to be interested in a subscription offering) brought in X dollars of revenue to the company per month. Based on this number, I was able to come up with a suggestion for my pitch as to what the subscription offering should include, and at what price.\n\nUltimately, I pitched the idea to a room filled with the CEO, head of product, head of engineering, and a few other C-Suiteers that Imgur should introduce a subscription plan offering to get rid of advertisements on the platform. I was able to make a strong enough case for improving the experience for the power-users of the platform - people who would *rather* pay X dollars a month to a platform they felt passionate about, rather than being bombarded by ads.  \n\nI left my internship in the summer of 2019, unsure if the company would act on this idea or if it was just a silly intern project. Sure enough, in the summer of 2020, just about one year later, they released their [Imgur Emerald subscription plan](https://www.theverge.com/2020/8/19/21373988/imgur-emerald-subscription-service-announced-coil-micropayments) at $5/month to remove ads on the platform. I'm not saying it was all because of me, but hey, maybe I helped push the idea along! ðŸ˜‰\n\n![Screen Shot 2023-02-03 at 12.53.48 PM](//images.ctfassets.net/crw7rb96lc2r/2NEnCyGaLTG1mNg2olsfLv/1214a449992743bed660d1121a14ee28/Screen_Shot_2023-02-03_at_12.53.48_PM.png)"}}]}},"pageContext":{}},"staticQueryHashes":["2744905544","4036308885"],"slicesMap":{}}