{"data":{"allContentfulProject":{"nodes":[{"title":"Documentation Website","content":null},{"title":"Data Visualization","content":null},{"title":"Advanced Component Building","content":{"content":"## Gathering Requirements\nThe first step involved with building a component is to make sure you have everything you need in order to get started. Some components may come from an external source, for example a product owner or other stakeholder, while others you may have to come up with yourself. I may look at inspiration from other design systems or Dribbble to help discover all states or properties needed for a component. For this specific example, we will be looking at a Stepper component.  \n\nTo start, I know that we are going to need both a linear stepper and non-linear version of the stepper. It is a specific part of the requirements for a Report Builder that is needed for one of our Nielsen applications. Also, I will need some way to denote either an optional or required step, as some steppers may have a mix of both. In addition to that we need a way to see the \"count\" of selections in each step, which may be relevant for some or all of the steps in a flow.  \n\nThe last part of requirements gathering involves thinking about ALL potential use cases, trying to \"future-proof\" the component so that it is robust to future changes. It helps to think about edge cases that may happen infrequently, in order to account for all scenarios.  \n\nOther features or properties that fall under this list include having a direction (vertical and horizontal), as I know sometimes horizontal or vertical screen real estate can be more important. I also know I will need some ability to distinguish between a step that is complete, incomplete, in progress, or potentially disabled. I may also consider a \"position\" state, which will show the beginning, middle, and end of a stepper and of COURSE, all of our components must include dark mode. ðŸ˜‰\n\n## Determining Properties and Sub-Components\nSo for this example of a Stepper component, I have determined it will consist of the following properties:\n1. Mode: Light, Dark\n2. Direction: Horizontal, Vertical\n3. Type: Linear, Nonlinear\n4. Position: Start, Middle, End\n5. State: Complete, Active, To Do\n6. w/ Count?: True, False\n7. Required?: True, False\n\nFrom these properties, I know there will be roughly 288 (2x2x2x3x3x2x2) overall different versions of this single component, which can be quite large and difficult to manage. I have found it very helpful when building out components to break it into sub-components. So here is what components I will be building:\n- __Stepper__: this is the main component, so should be simple enough with few variants to be able to pull into a project quickly and get what you need. This components main responsibilty should be laying out the overall structure for the Stepper so you can easily drop it into a design.\n  1. Mode: Light, Dark\n  2. Direction: Horizontal, Vertical\n  3. Type: Linear, Nonlinear\n- __Stepper Item__: This will be where a lot of the magic happens. Most of the variants will go into this component so that a designer can easily add/remove stepper items and configure how they need.\n  1. Mode: Light, Dark\n  2. Direction: Horizontal, Vertical\n  3. Position: Start, Middle, End, Nonlinear\n  4. State: Complete, Active, To Do\n  5. w/ Count?: True, False\n  6. Required?: True, False  \n\nNote: In cases where variants get to a high number (let's say over 100) it may be useful to build out a helper component or two to manage updates if things change over time. These will exist only in Figma for the purpose of managing the component library. Two helper components I would consider in this use case might be some sort of form label, that includes the text style & required/chip indicators, and a component for the actual graphical indicator, since this is something we may want to tweak over time.\n\n## Building out Component(s)\nFirst component to build is the progress-indicator \"helper\" component. This will be the graphic shown next to the names for the steppers, indicating WHERE the user is in the flow. One thing I want to make sure is that color is not the only way a user is able to determine status, and should be obvious in another way (filled in vs. empty circle). For this component, I'll start with what I think of as the __first__ occurance of a stepper item, which is an active, first step. From there I will go on to build other variants (by copy, pasting, tweaking) including state, tail position (making sure I account for horizontal versions), and mode for light and dark. This is just a placeholder for now, as I am building it in a way so that I'm able to update easily later.\n![stepper-indicator](//images.ctfassets.net/crw7rb96lc2r/pi1b7M7Vz2rNI9d13xN9p/50fb9df37e1d9d0444bc6e9756710a9b/stepper-indicator.png)\nThe next step will be building out the form-label component, which will include the style for the text in all states, as well as a required indicator and chip that can be toggled on an off by the user. Again, this serves as a helper-component that will allow me to scale changes throughout the \"main\" component with a lot of variants in the future.\n![stepper-label](//images.ctfassets.net/crw7rb96lc2r/4Y9sxh2mcduRyGCyyfZ498/9ec1f562d194fc10c641f2bb90daa51e/stepper-label.png)\nNow it's time for the BIG component, stepper item. In this, I will basically piece together the other two helper components I already made into one main component with ALL of the possible variants. This way, if a designer is using a stepper component and wants to configure/make changes, I can direct them to go right to stepper item, instead of configuring each piece individually. At this point, I have decided on six main variants for this components, (Mode, Position, State, Direction, w/ Chip?, Required) which I will lay out logically in a grid on the canvas.\n![stepper-item](//images.ctfassets.net/crw7rb96lc2r/7b0LXCK7GSMZnF2lF69JzD/d2f98877770f0f290ad76d3971e7eac2/stepper-item.png)\nIn building out all of the possible variants, I discovered a few additional things that I will add to the component at this time. First, since this component should be clickable (to jump around to different steps), I will need to add a Hovered and Clicked state to each version with this ability. I also discovered that the horizontal and vertical versions need to have different widths: the vertical items will be fixed, since they display on the side panel where horizontal space is not as important, and the vertical items are now set to \"hug contents\" so that they save as much horizontal space as possible.\n\n## Finishing Touches\nAt this point, I've already done most of the grunt work and all that is left to do is put a bow on everything. The final component will just be called \"Stepper\" which consists of all of the sub-components I already made. This will have only a few variants (Mode, Direction, Linear or Nonlinear), to make it simple for the user to drop into their designs.\n![stepper](//images.ctfassets.net/crw7rb96lc2r/7nQL7XTHnSpIVJzQsbUaWq/ff342026e0ab02f8a66d543d37436314/stepper.png)\nAfter I *think* the component is finished, I always like to throw it in a number of different scenarios to make sure it behaves how I had expected. This includes testing it's responsiveness as you grow or shrink the height or width, as well as testing edge cases like \"what happens if the stepper name is really long.\" From there I will make my adjustments, and because I constructed the component in an atomic way, it is really easy to make changes! \n![stepper-flow](//images.ctfassets.net/crw7rb96lc2r/2Vj0wqxhXsai4DXY6YxcUZ/bf80911a2ae6ad2c63d27f8ce5dc0c24/stepper-flow.png)\nAnd with that, the Stepper is ready to be published and go out into the world!"}},{"title":"Design System Foundations","content":{"content":"## Colors\nFollowing the 2021 Nielsen re-brand, our marketing department introduced a new set of colors that would shape how we make future products. This aligned extremely well with the introduction of Nielsen's design system.  \n\nStarting off with these marketing colors, I had to slightly tweak and transform the palettes in order to work better for the UI in our products. Accessibility was already established as a strong principle for this new design system, so we was able to craft a set of nine main colors with an 11-scale for each.  \n\nThis would give us enough flexibility to have a variation of color lightnesses to pick from for BOTH a light and dark mode UI (another thing that would be coming in the future).\n![nielsen-colors](//images.ctfassets.net/crw7rb96lc2r/2IiiW2quS2fPxEDblxnY5I/8105aa80f8b1cece5b6effd613a8f54f/nielsen-colors.png)\n\nIn order to achieve balance in our color scales for both light mode and dark mode, I used the \"Stark\" plugin in Figma to measure the color contrast between each color and a white/black background. The objective was to have roughly half of the colors (the lighter half) fully accessible on a black background and the other half accessible on white, meaning that each color 4.5:1 contrast ratio. This way, when switching from light to dark mode, and vice versa, we could start by a simple inversion of our color scales and still maintain accessible requirements for all components.\n![Screen Shot 2023-02-02 at 12.52.56 PM](//images.ctfassets.net/crw7rb96lc2r/1S03FSvO5vTePIqpAswXCD/8a0c8ffae2fb36d23e76baa25b8d18b6/Screen_Shot_2023-02-02_at_12.52.56_PM.png)\n\nAnother intersting challenge with color came from the fact that some of our components needed to work on several different background colors. A good example of that was our context switcher, which may appear on both a white or gray-100 background.  \n\nBy default, it had a gray-100 background because we aimed to achieve a subtle contrast with the background it was placed on. But this didn't work when placed on a gray-100 background, because the color doesn't show. The next logical choice was to make the gray color darker (gray-200) so that it shows up on both background types. But this strayed away from how we wanted to the component to show on a white background - it was a bit too bold.  \n\nThis led to me instantiating the idea of __Opacity Tokens__, which are a way to represent the color normally on the \"default\" background, but still be able to show on alternate backgrounds. This was done by bumping the color up in the scale and giving it some opacity, so that it *appeared* the same as the normal token, until placing it on an alternate-colored background. I created a opacity tokens for several of our light shades gray and blurple for light mode, (as well as the alternate for dark mode) to give us maximum flexibility when creating and updating components in the future.\n![opacity tokens](//images.ctfassets.net/crw7rb96lc2r/2NajlX6yhA5vsou7rM7CDi/42b354d0ee51bde3c00a86df440cc2d7/opacity_tokens.png)\n\n## Typography\nFor our typography, we decided on a scale of eleven different sizes, with three font weights for each (regular, semi-bold, and bold). One of the main objectives for the new system was to increase legibility across our apps, specifically our data-heavy, highly dense B2B products. To do this we created a base-size of 16px for the system, using this size as our \"Regular\" variant for many of our components. This was a huge improvement, as most of our legacy apps use 12px or 13px as a base size and leads to significant strain on the eyes after using the product for a significant amount of time.  \n\nLine heights and letter spacing was also carefully chose to meet accessibility needs (WCAG 2.2 AA standards) for our products as well as making the text in our applications easier to read.\n\nInter was chosen as our go-to font for our product suite, as it is notorious for great readablity at larger and smaller sizes, and also has support for a large number of languages.  We also enabled a number of Open Type features such as slashed zeroes, open digits, and monospaced numbers to increase legibility even more.\n\nBecause not ALL languages are covered through Inter, we have Noto Sans as a fallback option in case the language is not supported. With Nielsen being a global company and always expanding into new markets, it was highly important that we chose a font stack with full support, which had been previously problematic specifically with \"right-to-left\" langauges. \n![typography](//images.ctfassets.net/crw7rb96lc2r/16FJKWZ4JlSrcWm3TuX2rH/02cb425efff0d76e8342470b7f29b523/typography.png)\n\n## Spacing\nOur spacing system was crafted based on a 4px grid system, and this helped maintain consistency from smaller components all the way up to full page layouts. Again, we went with an 11-scale of spacing tokens, from 2px (special token for borders) all the way up to 64px. These are used for most internal padding, margins, heights, within our components. We have a few common tokens (24, 32, 48px) that are used for the heights of a handful of our components, making placing components NEXT to each other easier to scale as our designers begin to build screens.\n\nFor spacing __between__ components, or for screen layouts, I created a set of layout tokens to help with larger-scale organization. These range 192px, typically used for column widths in our layout system, all the way up to 1920px which is the biggest screen we provide support for on the web (margins simply infinitely increase after that).\n![Screen Shot 2023-02-02 at 1.32.50 PM](//images.ctfassets.net/crw7rb96lc2r/2S9Jsqvbm8VLvyI2aKaVIL/a92a8cd33da7258b066dab41f12088c0/Screen_Shot_2023-02-02_at_1.32.50_PM.png)"}}]}}}